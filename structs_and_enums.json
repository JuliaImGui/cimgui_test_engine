{
    "locations": {
        "ImGuiTestAction": "imgui_te_context:102",
        "ImGuiTestOpFlags_": "imgui_te_context:119",
        "ImGuiCaptureToolUI": "imgui_capture_tool:153",
        "ImGuiTestRef": "imgui_te_context:75",
        "ImGuiTestCheckFlags_": "imgui_te_engine:123",
        "ImGuiCaptureArgs": "imgui_capture_tool:59",
        "ImGuiCaptureWindowData": "imgui_capture_tool:82",
        "ImGuiTestEngineExportFormat": "imgui_te_exporters:46",
        "ImGuiTest": "imgui_te_engine:394",
        "ImGuiTestGenericVars": "imgui_te_context:175",
        "ImBuildInfo": "imgui_te_utils:77",
        "ImGuiTestStatus": "imgui_te_engine:92",
        "ImOsConsoleStream": "imgui_te_utils:94",
        "ImGuiCaptureFlags_": "imgui_capture_tool:46",
        "ImGuiCaptureImageBuf": "imgui_capture_tool:31",
        "ImGuiTestInfoTask": "imgui_te_internal:22",
        "ImGuiTestRunTask": "imgui_te_engine:447",
        "ImGuiTestOutput": "imgui_te_engine:385",
        "ImGuiTestItemList": "imgui_te_engine:319",
        "ImGuiTestItemInfo": "imgui_te_engine:299",
        "ImGuiTestVerboseLevel": "imgui_te_engine:80",
        "ImGuiTestLogFlags_": "imgui_te_engine:130",
        "ImGuiPerfToolEntry": "imgui_te_perftool:24",
        "ImGuiTestGatherTask": "imgui_te_internal:34",
        "ImGuiCaptureStatus": "imgui_capture_tool:75",
        "ImGuiTestLog": "imgui_te_engine:346",
        "ImGuiTestEngineIO": "imgui_te_engine:224",
        "ImGuiPerfToolBatch": "imgui_te_perftool:51",
        "ImGuiTestInputType": "imgui_te_internal:64",
        "ImGuiPerfToolDisplayType": "imgui_te_perftool:60",
        "ImGuiTestGroup": "imgui_te_engine:104",
        "ImGuiTestContext": "imgui_te_context:213",
        "ImGuiTestActionFilter": "imgui_te_context:136",
        "ImGuiTestInput": "imgui_te_internal:76",
        "ImGuiTestFindByLabelTask": "imgui_te_internal:50",
        "ImGuiTestFlags_": "imgui_te_engine:113",
        "ImGuiCsvParser": "imgui_te_utils:158",
        "ImGuiTestEngine": "imgui_te_internal:149",
        "ImOsConsoleTextColor": "imgui_te_utils:100",
        "ImGuiCaptureContext": "imgui_capture_tool:90",
        "ImGuiTestInputs": "imgui_te_internal:137",
        "ImGuiPerfTool": "imgui_te_perftool:68",
        "ImGuiTestActiveFunc": "imgui_te_engine:65",
        "ImGuiTestRunSpeed": "imgui_te_engine:72",
        "ImGuiTestRunFlags_": "imgui_te_engine:136",
        "ImGuiTestRefDesc": "imgui_te_context:88",
        "ImGuiTestLogLineInfo": "imgui_te_engine:340",
        "ImGuiTestCoroutineInterface": "imgui_te_coroutine:31",
        "ImGuiTestGenericItemStatus": "imgui_te_context:153"
    },
    "enum_comments": {
        "ImGuiTestStatus": {
            "above": "// Test status (stored in ImGuiTest)"
        },
        "ImGuiTestLogFlags_": {
            "above": "// Flags for ImGuiTestContext::Log* functions."
        },
        "ImGuiTestCheckFlags_": {
            "above": "// Flags for IM_CHECK* macros."
        },
        "ImGuiTestAction": {
            "above": "// Named actions. Generally you will call the named helpers e.g. ItemClick(). This is used by shared/low-level functions such as ItemAction()."
        },
        "ImGuiTestActiveFunc": {
            "above": "// Stored in ImGuiTestContext: where we are currently running GuiFunc or TestFunc"
        },
        "ImGuiTestOpFlags_": {
            "above": "// Generic flags for many ImGuiTestContext functions\n// Some flags are only supported by a handful of functions. Check function headers for list of supported flags."
        },
        "ImGuiTestFlags_": {
            "above": "// Flags (stored in ImGuiTest)"
        },
        "ImGuiTestGroup": {
            "above": "// Test group: this is mostly used to categorize tests in our testing UI. (Stored in ImGuiTest)"
        }
    },
    "struct_comments": {
        "ImGuiTestEngine": {
            "above": "// [Internal] Test Engine Context"
        },
        "ImGuiCaptureContext": {
            "above": "// Implements functionality for capturing images"
        },
        "ImGuiCaptureImageBuf": {
            "above": "// [Internal]\n// Helper class for simple bitmap manipulation (not particularly efficient!)"
        },
        "ImGuiTestInfoTask": {
            "above": "// Query item position/window/state given ID."
        },
        "ImGuiCaptureToolUI": {
            "above": "// Implements UI for capturing images\n// (when using ImGuiTestEngine scripting API you may not need to use this at all)"
        },
        "ImGuiTestRef": {
            "above": "// Weak reference to an Item/Window given an hashed ID _or_ a string path ID.\n// This is most often passed as argument to function and generally has a very short lifetime.\n// Documentation: https://github.com/ocornut/imgui_test_engine/wiki/Named-References\n// (SUGGESTION: add those constructors to \"VA Step Filter\" (Visual Assist) or a .natstepfilter file (Visual Studio) so they are skipped by F11 (StepInto)"
        },
        "ImGuiPerfToolEntry": {
            "above": "// [Internal] Perf log entry. Changes to this struct should be reflected in ImGuiTestContext::PerfCapture() and ImGuiTestEngine_Start().\n// This struct assumes strings stored here will be available until next ImGuiPerfTool::Clear() call. Fortunately we do not have to actively\n// manage lifetime of these strings. New entries are created only in two cases:\n// 1. ImGuiTestEngine_PerfToolAppendToCSV() call after perf test has run. This call receives ImGuiPerfToolEntry with const strings stored indefinitely by application.\n// 2. As a consequence of ImGuiPerfTool::LoadCSV() call, we persist the ImGuiCSVParser instance, which keeps parsed CSV text, from which strings are referenced.\n// As a result our solution also doesn't make many allocations."
        },
        "ImGuiTestGatherTask": {
            "above": "// Gather item list in given parent ID."
        },
        "ImGuiCaptureArgs": {
            "above": "// Defines input and output arguments for capture process.\n// When capturing from tests you can usually use the ImGuiTestContext::CaptureXXX() helpers functions."
        },
        "ImGuiTestRefDesc": {
            "above": "// Debug helper to output a string showing the Path, ID or Debug Label based on what is available (some items only have ID as we couldn't find/store a Path)\n// (The size is arbitrary, this is only used for logging info the user/debugger)"
        },
        "ImGuiTestRunTask": {
            "above": "// Stored in test queue"
        },
        "ImGuiTestOutput": {
            "above": "// Storage for the output of a test run"
        },
        "ImGuiTest": {
            "above": "// Storage for one test"
        },
        "ImGuiTestGenericVars": {
            "above": "// Generic structure with various storage fields.\n// This is useful for tests to quickly share data between GuiFunc and TestFunc without creating custom data structure.\n// If those fields are not enough: using test->SetVarsDataType<>() + ctx->GetVars<>() it is possible to store custom data."
        },
        "ImBuildInfo": {
            "above": "// All the pointers are expect to be literals/persistent"
        },
        "ImGuiPerfToolBatch": {
            "above": "// [Internal] Perf log batch."
        },
        "ImGuiTestItemList": {
            "above": "// Result of an GatherItems() query"
        },
        "ImGuiTestActionFilter": {
            "above": "// Advanced filtering for ItemActionAll()"
        },
        "ImGuiTestInput": {
            "above": "// FIXME: May want to strip further now that core imgui is using its own input queue"
        },
        "ImGuiTestCoroutineInterface": {
            "above": "// Coroutine support interface\n// Your app needs to return and implement this.\n// You can '#define IMGUI_TEST_ENGINE_ENABLE_COROUTINE_STDTHREAD_IMPL 1' in your imconfig file to use a default implementation using std::thread\n// Documentation: https://github.com/ocornut/imgui_test_engine/wiki/Setting-Up"
        },
        "ImGuiTestItemInfo": {
            "above": "// Information about a given item or window, result of an ItemInfo() or WindowInfo() query"
        },
        "ImGuiTestFindByLabelTask": {
            "above": "// Find item ID given a label and a parent id\n// Usually used by queries with wildcards such as ItemInfo(\"hello/**/foo/bar\")"
        },
        "ImGuiTestGenericItemStatus": {
            "above": "// Helper struct to store various query-able state of an item.\n// This facilitate interactions between GuiFunc and TestFunc, since those state are frequently used."
        }
    },
    "structs": {
        "ImGuiTestEngine": [
            {
                "name": "IO",
                "type": "ImGuiTestEngineIO"
            },
            {
                "name": "UiContextTarget",
                "type": "ImGuiContext*",
                "comment": {
                    "sameline": "// imgui context for testing"
                }
            },
            {
                "name": "UiContextActive",
                "type": "ImGuiContext*",
                "comment": {
                    "sameline": "// imgui context for testing == UiContextTarget or nullptr"
                }
            },
            {
                "name": "Started",
                "type": "bool"
            },
            {
                "name": "BatchStartTime",
                "type": "unsigned long long"
            },
            {
                "name": "BatchEndTime",
                "type": "unsigned long long"
            },
            {
                "name": "FrameCount",
                "type": "int"
            },
            {
                "name": "OverrideDeltaTime",
                "type": "float",
                "comment": {
                    "sameline": "// Inject custom delta time into imgui context to simulate clock passing faster than wall clock time."
                }
            },
            {
                "name": "TestsAll",
                "type": "ImVector_ImGuiTest_Ptr"
            },
            {
                "name": "TestsQueue",
                "type": "ImVector_ImGuiTestRunTask"
            },
            {
                "name": "TestContext",
                "type": "ImGuiTestContext*",
                "comment": {
                    "sameline": "// Running test context"
                }
            },
            {
                "name": "TestsSourceLinesDirty",
                "type": "bool"
            },
            {
                "name": "InfoTasks",
                "type": "ImVector_ImGuiTestInfoTask_Ptr"
            },
            {
                "name": "GatherTask",
                "type": "ImGuiTestGatherTask"
            },
            {
                "name": "FindByLabelTask",
                "type": "ImGuiTestFindByLabelTask"
            },
            {
                "name": "TestQueueCoroutine",
                "type": "void*",
                "comment": {
                    "sameline": "// Coroutine to run the test queue"
                }
            },
            {
                "name": "TestQueueCoroutineShouldExit",
                "type": "bool",
                "comment": {
                    "sameline": "// Flag to indicate that we are shutting down and the test queue coroutine should stop"
                }
            },
            {
                "name": "Inputs",
                "type": "ImGuiTestInputs"
            },
            {
                "name": "Abort",
                "type": "bool"
            },
            {
                "name": "UiSelectAndScrollToTest",
                "type": "ImGuiTest*"
            },
            {
                "name": "UiSelectedTest",
                "type": "ImGuiTest*"
            },
            {
                "name": "UiFilterTests",
                "type": "Str*"
            },
            {
                "name": "UiFilterPerfs",
                "type": "Str*"
            },
            {
                "name": "UiFilterByStatusMask",
                "type": "unsigned int"
            },
            {
                "name": "UiMetricsOpen",
                "type": "bool"
            },
            {
                "name": "UiDebugLogOpen",
                "type": "bool"
            },
            {
                "name": "UiCaptureToolOpen",
                "type": "bool"
            },
            {
                "name": "UiStackToolOpen",
                "type": "bool"
            },
            {
                "name": "UiPerfToolOpen",
                "type": "bool"
            },
            {
                "name": "UiLogHeight",
                "type": "float"
            },
            {
                "name": "PerfRefDeltaTime",
                "type": "double"
            },
            {
                "name": "PerfDeltaTime100",
                "type": "ImMovingAverage_double"
            },
            {
                "name": "PerfDeltaTime500",
                "type": "ImMovingAverage_double"
            },
            {
                "name": "PerfTool",
                "type": "ImGuiPerfTool*"
            },
            {
                "name": "CaptureTool",
                "type": "ImGuiCaptureToolUI",
                "comment": {
                    "sameline": "// Capture tool UI"
                }
            },
            {
                "name": "CaptureContext",
                "type": "ImGuiCaptureContext",
                "comment": {
                    "sameline": "// Capture context used in tests"
                }
            },
            {
                "name": "CaptureCurrentArgs",
                "type": "ImGuiCaptureArgs*"
            },
            {
                "name": "PostSwapCalled",
                "type": "bool"
            },
            {
                "name": "ToolDebugRebootUiContext",
                "type": "bool",
                "comment": {
                    "sameline": "// Completely shutdown and recreate the dear imgui context in place"
                }
            },
            {
                "name": "ToolSlowDown",
                "type": "bool"
            },
            {
                "name": "ToolSlowDownMs",
                "type": "int"
            },
            {
                "name": "BackupConfigRunSpeed",
                "type": "ImGuiTestRunSpeed"
            },
            {
                "name": "BackupConfigNoThrottle",
                "type": "bool"
            }
        ],
        "ImGuiCaptureContext": [
            {
                "name": "ScreenCaptureFunc",
                "type": "ImGuiScreenCaptureFunc *",
                "comment": {
                    "sameline": "// Graphics backend specific function that captures specified portion of framebuffer and writes RGBA data to `pixels` buffer."
                }
            },
            {
                "name": "ScreenCaptureUserData",
                "type": "void*",
                "comment": {
                    "sameline": "// Custom user pointer which is passed to ScreenCaptureFunc. (Optional)"
                }
            },
            {
                "name": "VideoCaptureEncoderPath",
                "type": "char*",
                "comment": {
                    "sameline": "// Video encoder path (not owned, stored externally)."
                }
            },
            {
                "name": "VideoCaptureEncoderPathSize",
                "type": "int",
                "comment": {
                    "sameline": "// Optional. Set in order to edit this parameter from UI."
                }
            },
            {
                "name": "VideoCaptureEncoderParams",
                "type": "char*",
                "comment": {
                    "sameline": "// Video encoder params (not owned, stored externally)."
                }
            },
            {
                "name": "VideoCaptureEncoderParamsSize",
                "type": "int",
                "comment": {
                    "sameline": "// Optional. Set in order to edit this parameter from UI."
                }
            },
            {
                "name": "GifCaptureEncoderParams",
                "type": "char*",
                "comment": {
                    "sameline": "// Video encoder params for GIF output (not owned, stored externally)."
                }
            },
            {
                "name": "GifCaptureEncoderParamsSize",
                "type": "int",
                "comment": {
                    "sameline": "// Optional. Set in order to edit this parameter from UI."
                }
            },
            {
                "name": "_CaptureRect",
                "type": "ImRect",
                "comment": {
                    "sameline": "// Viewport rect that is being captured."
                }
            },
            {
                "name": "_CapturedWindowRect",
                "type": "ImRect",
                "comment": {
                    "sameline": "// Top-left corner of region that covers all windows included in capture. This is not same as _CaptureRect.Min when capturing explicitly specified rect."
                }
            },
            {
                "name": "_ChunkNo",
                "type": "int",
                "comment": {
                    "sameline": "// Number of chunk that is being captured when capture spans multiple frames."
                }
            },
            {
                "name": "_FrameNo",
                "type": "int",
                "comment": {
                    "sameline": "// Frame number during capture process that spans multiple frames."
                }
            },
            {
                "name": "_MouseRelativeToWindowPos",
                "type": "ImVec2",
                "comment": {
                    "sameline": "// Mouse cursor position relative to captured window (when _StitchAll is in use)."
                }
            },
            {
                "name": "_HoveredWindow",
                "type": "ImGuiWindow*",
                "comment": {
                    "sameline": "// Window which was hovered at capture start."
                }
            },
            {
                "name": "_CaptureBuf",
                "type": "ImGuiCaptureImageBuf",
                "comment": {
                    "sameline": "// Output image buffer."
                }
            },
            {
                "name": "_CaptureArgs",
                "type": "const ImGuiCaptureArgs*",
                "comment": {
                    "sameline": "// Current capture args. Set only if capture is in progress."
                }
            },
            {
                "name": "_WindowsData",
                "type": "ImVector_ImGuiCaptureWindowData",
                "comment": {
                    "sameline": "// Backup windows that will have their rect modified and restored. args->InCaptureWindows can not be used because popups may get closed during capture and no longer appear in that list."
                }
            },
            {
                "name": "_VideoRecording",
                "type": "bool",
                "comment": {
                    "sameline": "// Flag indicating that video recording is in progress."
                }
            },
            {
                "name": "_VideoLastFrameTime",
                "type": "double",
                "comment": {
                    "sameline": "// Time when last video frame was recorded."
                }
            },
            {
                "name": "_VideoEncoderPipe",
                "type": "FILE*",
                "comment": {
                    "sameline": "// File writing to stdin of video encoder process."
                }
            },
            {
                "name": "_BackupMouseDrawCursor",
                "type": "bool",
                "comment": {
                    "sameline": "// Initial value of g.IO.MouseDrawCursor"
                }
            },
            {
                "name": "_BackupDisplayWindowPadding",
                "type": "ImVec2",
                "comment": {
                    "sameline": "// Backup padding. We set it to {0, 0} during capture."
                }
            },
            {
                "name": "_BackupDisplaySafeAreaPadding",
                "type": "ImVec2",
                "comment": {
                    "sameline": "// Backup padding. We set it to {0, 0} during capture."
                }
            }
        ],
        "ImGuiCaptureImageBuf": [
            {
                "name": "Width",
                "type": "int"
            },
            {
                "name": "Height",
                "type": "int"
            },
            {
                "name": "Data",
                "type": "unsigned int*",
                "comment": {
                    "sameline": "// RGBA8"
                }
            }
        ],
        "ImGuiTestInfoTask": [
            {
                "name": "ID",
                "type": "unsigned int"
            },
            {
                "name": "FrameCount",
                "type": "int",
                "comment": {
                    "sameline": "// Timestamp of request"
                }
            },
            {
                "name": "DebugName[64]",
                "size": 64,
                "type": "char",
                "comment": {
                    "sameline": "// Debug string representing the queried ID"
                }
            },
            {
                "name": "Result",
                "type": "ImGuiTestItemInfo"
            }
        ],
        "ImGuiCaptureToolUI": [
            {
                "name": "SnapGridSize",
                "type": "float",
                "comment": {
                    "sameline": "// Size of the grid cell for \"snap to grid\" functionality."
                }
            },
            {
                "name": "OutputLastFilename[256]",
                "size": 256,
                "type": "char",
                "comment": {
                    "sameline": "// File name of last captured file."
                }
            },
            {
                "name": "VideoCaptureExtension",
                "type": "char*",
                "comment": {
                    "sameline": "// Video file extension (e.g. \".gif\" or \".mp4\")"
                }
            },
            {
                "name": "VideoCaptureExtensionSize",
                "type": "int",
                "comment": {
                    "sameline": "// Optional. Set in order to edit this parameter from UI."
                }
            },
            {
                "name": "_CaptureArgs",
                "type": "ImGuiCaptureArgs",
                "comment": {
                    "sameline": "// Capture args"
                }
            },
            {
                "name": "_StateIsPickingWindow",
                "type": "bool"
            },
            {
                "name": "_StateIsCapturing",
                "type": "bool"
            },
            {
                "name": "_SelectedWindows",
                "type": "ImVector_Uint"
            },
            {
                "name": "_OutputFileTemplate[256]",
                "size": 256,
                "type": "char",
                "comment": {
                    "sameline": "//"
                }
            },
            {
                "name": "_FileCounter",
                "type": "int",
                "comment": {
                    "sameline": "// Counter which may be appended to file name when saving. By default, counting starts from 1. When done this field holds number of saved files."
                }
            }
        ],
        "ImGuiTestInputs": [
            {
                "name": "MousePosValue",
                "type": "ImVec2",
                "comment": {
                    "sameline": "// Own non-rounded copy of MousePos in order facilitate simulating mouse movement very slow speed and high-framerate"
                }
            },
            {
                "name": "MouseWheel",
                "type": "ImVec2"
            },
            {
                "name": "MouseHoveredViewport",
                "type": "unsigned int"
            },
            {
                "name": "MouseButtonsValue",
                "type": "int",
                "comment": {
                    "sameline": "// FIXME-TESTS: Use simulated_io.MouseDown[] ?"
                }
            },
            {
                "name": "Queue",
                "type": "ImVector_ImGuiTestInput"
            },
            {
                "name": "HostEscDown",
                "type": "bool"
            },
            {
                "name": "HostEscDownDuration",
                "type": "float",
                "comment": {
                    "sameline": "// Maintain our own DownDuration for host/backend ESC key so we can abort."
                }
            }
        ],
        "ImGuiTestRef": [
            {
                "name": "ID",
                "type": "unsigned int",
                "comment": {
                    "sameline": "// Pre-hashed ID"
                }
            },
            {
                "name": "Path",
                "type": "const char*",
                "comment": {
                    "sameline": "// Relative or absolute path (string pointed to, not owned, as our lifetime is very short)"
                }
            }
        ],
        "ImGuiPerfToolEntry": [
            {
                "name": "Timestamp",
                "type": "unsigned long long",
                "comment": {
                    "sameline": "// Title of a particular batch of perftool entries."
                }
            },
            {
                "name": "Category",
                "type": "const char*",
                "comment": {
                    "sameline": "// Name of category perf test is in."
                }
            },
            {
                "name": "TestName",
                "type": "const char*",
                "comment": {
                    "sameline": "// Name of perf test."
                }
            },
            {
                "name": "DtDeltaMs",
                "type": "double",
                "comment": {
                    "sameline": "// Result of perf test."
                }
            },
            {
                "name": "DtDeltaMsMin",
                "type": "double",
                "comment": {
                    "sameline": "// May be used by perftool."
                }
            },
            {
                "name": "DtDeltaMsMax",
                "type": "double",
                "comment": {
                    "sameline": "// May be used by perftool."
                }
            },
            {
                "name": "NumSamples",
                "type": "int",
                "comment": {
                    "sameline": "// Number aggregated samples."
                }
            },
            {
                "name": "PerfStressAmount",
                "type": "int",
                "comment": {
                    "sameline": "//"
                }
            },
            {
                "name": "GitBranchName",
                "type": "const char*",
                "comment": {
                    "sameline": "// Build information."
                }
            },
            {
                "name": "BuildType",
                "type": "const char*",
                "comment": {
                    "sameline": "//"
                }
            },
            {
                "name": "Cpu",
                "type": "const char*",
                "comment": {
                    "sameline": "//"
                }
            },
            {
                "name": "OS",
                "type": "const char*",
                "comment": {
                    "sameline": "//"
                }
            },
            {
                "name": "Compiler",
                "type": "const char*",
                "comment": {
                    "sameline": "//"
                }
            },
            {
                "name": "Date",
                "type": "const char*",
                "comment": {
                    "sameline": "// Date of this entry or min date of combined entries."
                }
            },
            {
                "name": "VsBaseline",
                "type": "double",
                "comment": {
                    "sameline": "// Percent difference vs baseline."
                }
            },
            {
                "name": "LabelIndex",
                "type": "int",
                "comment": {
                    "sameline": "// Index of TestName in ImGuiPerfTool::_LabelsVisible."
                }
            }
        ],
        "ImGuiTestGatherTask": [
            {
                "name": "InParentID",
                "type": "unsigned int"
            },
            {
                "name": "InMaxDepth",
                "type": "int"
            },
            {
                "name": "InLayerMask",
                "type": "short"
            },
            {
                "name": "OutList",
                "type": "ImGuiTestItemList*"
            },
            {
                "name": "LastItemInfo",
                "type": "ImGuiTestItemInfo*"
            }
        ],
        "ImGuiPerfTool": [
            {
                "name": "_SrcData",
                "type": "ImVector_ImGuiPerfToolEntry",
                "comment": {
                    "sameline": "// Raw entries from CSV file (with string pointer into CSV data)."
                }
            },
            {
                "name": "_Labels",
                "type": "ImVector_const_charPtr"
            },
            {
                "name": "_LabelsVisible",
                "type": "ImVector_const_charPtr",
                "comment": {
                    "sameline": "// ImPlot requires a pointer of all labels beforehand. Always contains a dummy \"\" entry at the end!"
                }
            },
            {
                "name": "_Batches",
                "type": "ImVector_ImGuiPerfToolBatch"
            },
            {
                "name": "_LabelBarCounts",
                "type": "ImGuiStorage",
                "comment": {
                    "sameline": "// Number bars each label will render."
                }
            },
            {
                "name": "_NumVisibleBuilds",
                "type": "int",
                "comment": {
                    "sameline": "// Cached number of visible builds."
                }
            },
            {
                "name": "_NumUniqueBuilds",
                "type": "int",
                "comment": {
                    "sameline": "// Cached number of unique builds."
                }
            },
            {
                "name": "_DisplayType",
                "type": "ImGuiPerfToolDisplayType"
            },
            {
                "name": "_BaselineBatchIndex",
                "type": "int",
                "comment": {
                    "sameline": "// Index of baseline build."
                }
            },
            {
                "name": "_BaselineTimestamp",
                "type": "unsigned long long"
            },
            {
                "name": "_BaselineBuildId",
                "type": "unsigned long long"
            },
            {
                "name": "_Filter[128]",
                "size": 128,
                "type": "char",
                "comment": {
                    "sameline": "// Context menu filtering substring."
                }
            },
            {
                "name": "_FilterDateFrom[11]",
                "size": 11,
                "type": "char"
            },
            {
                "name": "_FilterDateTo[11]",
                "size": 11,
                "type": "char"
            },
            {
                "name": "_InfoTableHeight",
                "type": "float"
            },
            {
                "name": "_AlignStress",
                "type": "int",
                "comment": {
                    "sameline": "// Alignment values for build info components, so they look aligned in the legend."
                }
            },
            {
                "name": "_AlignType",
                "type": "int"
            },
            {
                "name": "_AlignOs",
                "type": "int"
            },
            {
                "name": "_AlignCpu",
                "type": "int"
            },
            {
                "name": "_AlignCompiler",
                "type": "int"
            },
            {
                "name": "_AlignBranch",
                "type": "int"
            },
            {
                "name": "_AlignSamples",
                "type": "int"
            },
            {
                "name": "_InfoTableSortDirty",
                "type": "bool"
            },
            {
                "name": "_InfoTableSort",
                "type": "ImVector_Ulonglong",
                "comment": {
                    "sameline": "// _InfoTableSort[_LabelsVisible.Size * _Batches.Size]. Contains sorted batch indices for each label."
                }
            },
            {
                "name": "_InfoTableSortSpecs",
                "type": "const ImGuiTableSortSpecs*",
                "comment": {
                    "sameline": "// Current table sort specs."
                }
            },
            {
                "name": "_TempSet",
                "type": "ImGuiStorage",
                "comment": {
                    "sameline": "// Used as a set"
                }
            },
            {
                "name": "_TableHoveredTest",
                "type": "int",
                "comment": {
                    "sameline": "// Index within _VisibleLabelPointers array."
                }
            },
            {
                "name": "_TableHoveredBatch",
                "type": "int"
            },
            {
                "name": "_PlotHoverTest",
                "type": "int"
            },
            {
                "name": "_PlotHoverBatch",
                "type": "int"
            },
            {
                "name": "_PlotHoverTestLabel",
                "type": "bool"
            },
            {
                "name": "_ReportGenerating",
                "type": "bool"
            },
            {
                "name": "_Visibility",
                "type": "ImGuiStorage"
            },
            {
                "name": "_CsvParser",
                "type": "ImGuiCsvParser*",
                "comment": {
                    "sameline": "// We keep this around and point to its fields"
                }
            }
        ],
        "ImGuiCaptureArgs": [
            {
                "name": "InFlags",
                "type": "unsigned int",
                "comment": {
                    "sameline": "// Flags for customizing behavior of screenshot tool."
                }
            },
            {
                "name": "InCaptureWindows",
                "type": "ImVector_ImGuiWindowPtr",
                "comment": {
                    "sameline": "// Windows to capture. All other windows will be hidden. May be used with InCaptureRect to capture only some windows in specified rect."
                }
            },
            {
                "name": "InCaptureRect",
                "type": "ImRect",
                "comment": {
                    "sameline": "// Screen rect to capture. Does not include padding."
                }
            },
            {
                "name": "InPadding",
                "type": "float",
                "comment": {
                    "sameline": "// Extra padding at the edges of the screenshot. Ensure that there is available space around capture rect horizontally, also vertically if ImGuiCaptureFlags_StitchFullContents is not used."
                }
            },
            {
                "name": "InOutputFile[256]",
                "size": 256,
                "type": "char",
                "comment": {
                    "sameline": "// Output will be saved to a file if InOutputImageBuf is nullptr."
                }
            },
            {
                "name": "InOutputImageBuf",
                "type": "ImGuiCaptureImageBuf*",
                "comment": {
                    "sameline": "// _OR_ Output will be saved to image buffer if specified."
                }
            },
            {
                "name": "InRecordFPSTarget",
                "type": "int",
                "comment": {
                    "sameline": "// FPS target for recording videos."
                }
            },
            {
                "name": "InSizeAlign",
                "type": "int",
                "comment": {
                    "sameline": "// Resolution alignment (0 = auto, 1 = no alignment, >= 2 = align width/height to be multiple of given value)"
                }
            },
            {
                "name": "OutImageSize",
                "type": "ImVec2",
                "comment": {
                    "sameline": "// Produced image size."
                }
            }
        ],
        "ImGuiCaptureWindowData": [
            {
                "name": "Window",
                "type": "ImGuiWindow*"
            },
            {
                "name": "BackupRect",
                "type": "ImRect"
            },
            {
                "name": "PosDuringCapture",
                "type": "ImVec2"
            }
        ],
        "ImGuiTestRefDesc": [
            {
                "name": "Buf[80]",
                "size": 80,
                "type": "char"
            }
        ],
        "ImGuiTestLog": [
            {
                "name": "Buffer",
                "type": "ImGuiTextBuffer"
            },
            {
                "name": "LineInfo",
                "type": "ImVector_ImGuiTestLogLineInfo"
            },
            {
                "name": "CountPerLevel[6]",
                "size": 6,
                "type": "int"
            }
        ],
        "ImGuiTestRunTask": [
            {
                "name": "Test",
                "type": "ImGuiTest*"
            },
            {
                "name": "RunFlags",
                "type": "int"
            }
        ],
        "ImGuiTestOutput": [
            {
                "name": "Status",
                "type": "ImGuiTestStatus"
            },
            {
                "name": "Log",
                "type": "ImGuiTestLog"
            },
            {
                "name": "StartTime",
                "type": "unsigned long long"
            },
            {
                "name": "EndTime",
                "type": "unsigned long long"
            }
        ],
        "ImGuiTest": [
            {
                "name": "Category",
                "type": "const char*",
                "comment": {
                    "sameline": "// Literal, not owned"
                }
            },
            {
                "name": "Name",
                "type": "const char*",
                "comment": {
                    "sameline": "// Literal, generally not owned unless NameOwned=true"
                }
            },
            {
                "name": "Group",
                "type": "ImGuiTestGroup",
                "comment": {
                    "sameline": "// Coarse groups: 'Tests' or 'Perf'"
                }
            },
            {
                "name": "NameOwned",
                "type": "bool",
                "comment": {
                    "sameline": "//"
                }
            },
            {
                "name": "ArgVariant",
                "type": "int",
                "comment": {
                    "sameline": "// User parameter. Generally we use it to run variations of a same test by sharing GuiFunc/TestFunc"
                }
            },
            {
                "name": "Flags",
                "type": "int",
                "comment": {
                    "sameline": "// See ImGuiTestFlags_"
                }
            },
            {
                "name": "GuiFunc",
                "type": "ImGuiTestGuiFunc *",
                "comment": {
                    "sameline": "// GUI function (optional if your test are running over an existing GUI application)"
                }
            },
            {
                "name": "TestFunc",
                "type": "ImGuiTestTestFunc *",
                "comment": {
                    "sameline": "// Test function"
                }
            },
            {
                "name": "UserData",
                "type": "void*",
                "comment": {
                    "sameline": "// General purpose user data (if assigning capturing lambdas on GuiFunc/TestFunc you may not need to use this)"
                }
            },
            {
                "name": "SourceFile",
                "type": "const char*",
                "comment": {
                    "sameline": "// __FILE__"
                }
            },
            {
                "name": "SourceLine",
                "type": "int",
                "comment": {
                    "sameline": "// __LINE__"
                }
            },
            {
                "name": "SourceLineEnd",
                "type": "int",
                "comment": {
                    "sameline": "// end of line (when calculated by ImGuiTestEngine_StartCalcSourceLineEnds())"
                }
            },
            {
                "name": "Output",
                "type": "ImGuiTestOutput"
            },
            {
                "name": "VarsSize",
                "type": "unsigned long"
            },
            {
                "name": "VarsConstructor",
                "type": "ImGuiTestVarsConstructor *"
            },
            {
                "name": "VarsPostConstructor",
                "type": "ImGuiTestVarsPostConstructor *",
                "comment": {
                    "sameline": "// To override constructor default (in case the default are problematic on the first GuiFunc frame)"
                }
            },
            {
                "name": "VarsPostConstructorUserFn",
                "type": "void*"
            },
            {
                "name": "VarsDestructor",
                "type": "ImGuiTestVarsDestructor *"
            }
        ],
        "ImGuiTestGenericVars": [
            {
                "name": "Step",
                "type": "int"
            },
            {
                "name": "Count",
                "type": "int"
            },
            {
                "name": "DockId",
                "type": "unsigned int"
            },
            {
                "name": "OwnerId",
                "type": "unsigned int"
            },
            {
                "name": "WindowSize",
                "type": "ImVec2"
            },
            {
                "name": "WindowFlags",
                "type": "int"
            },
            {
                "name": "TableFlags",
                "type": "int"
            },
            {
                "name": "PopupFlags",
                "type": "int"
            },
            {
                "name": "Status",
                "type": "ImGuiTestGenericItemStatus"
            },
            {
                "name": "ShowWindow1",
                "type": "bool"
            },
            {
                "name": "ShowWindow2",
                "type": "bool"
            },
            {
                "name": "UseClipper",
                "type": "bool"
            },
            {
                "name": "UseViewports",
                "type": "bool"
            },
            {
                "name": "Width",
                "type": "float"
            },
            {
                "name": "Pos",
                "type": "ImVec2"
            },
            {
                "name": "Pivot",
                "type": "ImVec2"
            },
            {
                "name": "ItemSize",
                "type": "ImVec2"
            },
            {
                "name": "Color1",
                "type": "ImVec4"
            },
            {
                "name": "Color2",
                "type": "ImVec4"
            },
            {
                "name": "Int1",
                "type": "int"
            },
            {
                "name": "Int2",
                "type": "int"
            },
            {
                "name": "IntArray[10]",
                "size": 10,
                "type": "int"
            },
            {
                "name": "Float1",
                "type": "float"
            },
            {
                "name": "Float2",
                "type": "float"
            },
            {
                "name": "FloatArray[10]",
                "size": 10,
                "type": "float"
            },
            {
                "name": "Bool1",
                "type": "bool"
            },
            {
                "name": "Bool2",
                "type": "bool"
            },
            {
                "name": "BoolArray[10]",
                "size": 10,
                "type": "bool"
            },
            {
                "name": "Id",
                "type": "unsigned int"
            },
            {
                "name": "IdArray[10]",
                "size": 10,
                "type": "unsigned int"
            },
            {
                "name": "Str1[256]",
                "size": 256,
                "type": "char"
            },
            {
                "name": "Str2[256]",
                "size": 256,
                "type": "char"
            }
        ],
        "ImGuiTestEngineIO": [
            {
                "name": "CoroutineFuncs",
                "type": "ImGuiTestCoroutineInterface*",
                "comment": {
                    "sameline": "// (Required) Coroutine functions (see imgui_te_coroutines.h)"
                }
            },
            {
                "name": "SrcFileOpenFunc",
                "type": "ImGuiTestEngineSrcFileOpenFunc *",
                "comment": {
                    "sameline": "// (Optional) To open source files from test engine UI (otherwise default to open file in shell)"
                }
            },
            {
                "name": "ScreenCaptureFunc",
                "type": "ImGuiScreenCaptureFunc *",
                "comment": {
                    "sameline": "// (Optional) To capture graphics output (application _MUST_ call ImGuiTestEngine_PostSwap() function after swapping is framebuffer)"
                }
            },
            {
                "name": "SrcFileOpenUserData",
                "type": "void*",
                "comment": {
                    "sameline": "// (Optional) User data for SrcFileOpenFunc"
                }
            },
            {
                "name": "ScreenCaptureUserData",
                "type": "void*",
                "comment": {
                    "sameline": "// (Optional) User data for ScreenCaptureFunc"
                }
            },
            {
                "name": "ConfigSavedSettings",
                "type": "bool",
                "comment": {
                    "sameline": "// Load/Save settings in main context .ini file."
                }
            },
            {
                "name": "ConfigRunSpeed",
                "type": "ImGuiTestRunSpeed",
                "comment": {
                    "sameline": "// Run tests in fast/normal/cinematic mode"
                }
            },
            {
                "name": "ConfigStopOnError",
                "type": "bool",
                "comment": {
                    "sameline": "// Stop queued tests on test error"
                }
            },
            {
                "name": "ConfigBreakOnError",
                "type": "bool",
                "comment": {
                    "sameline": "// Break debugger on test error by calling IM_DEBUG_BREAK()"
                }
            },
            {
                "name": "ConfigKeepGuiFunc",
                "type": "bool",
                "comment": {
                    "sameline": "// Keep test GUI running at the end of the test"
                }
            },
            {
                "name": "ConfigVerboseLevel",
                "type": "ImGuiTestVerboseLevel"
            },
            {
                "name": "ConfigVerboseLevelOnError",
                "type": "ImGuiTestVerboseLevel"
            },
            {
                "name": "ConfigLogToTTY",
                "type": "bool"
            },
            {
                "name": "ConfigLogToDebugger",
                "type": "bool"
            },
            {
                "name": "ConfigRestoreFocusAfterTests",
                "type": "bool",
                "comment": {
                    "sameline": "// Restore focus back after running tests"
                }
            },
            {
                "name": "ConfigCaptureEnabled",
                "type": "bool",
                "comment": {
                    "sameline": "// Master enable flags for capturing and saving captures. Disable to avoid e.g. lengthy saving of large PNG files."
                }
            },
            {
                "name": "ConfigCaptureOnError",
                "type": "bool"
            },
            {
                "name": "ConfigNoThrottle",
                "type": "bool",
                "comment": {
                    "sameline": "// Disable vsync for performance measurement or fast test running"
                }
            },
            {
                "name": "ConfigMouseDrawCursor",
                "type": "bool",
                "comment": {
                    "sameline": "// Enable drawing of Dear ImGui software mouse cursor when running tests"
                }
            },
            {
                "name": "ConfigFixedDeltaTime",
                "type": "float",
                "comment": {
                    "sameline": "// Use fixed delta time instead of calculating it from wall clock"
                }
            },
            {
                "name": "PerfStressAmount",
                "type": "int",
                "comment": {
                    "sameline": "// Integer to scale the amount of items submitted in test"
                }
            },
            {
                "name": "GitBranchName[64]",
                "size": 64,
                "type": "char",
                "comment": {
                    "sameline": "// e.g. fill in branch name (e.g. recorded in perf samples .csv)"
                }
            },
            {
                "name": "MouseSpeed",
                "type": "float",
                "comment": {
                    "sameline": "// Mouse speed (pixel/second) when not running in fast mode"
                }
            },
            {
                "name": "MouseWobble",
                "type": "float",
                "comment": {
                    "sameline": "// (0.0f..1.0f) How much wobble to apply to the mouse (pixels per pixel of move distance) when not running in fast mode"
                }
            },
            {
                "name": "ScrollSpeed",
                "type": "float",
                "comment": {
                    "sameline": "// Scroll speed (pixel/second) when not running in fast mode"
                }
            },
            {
                "name": "TypingSpeed",
                "type": "float",
                "comment": {
                    "sameline": "// Char input speed (characters/second) when not running in fast mode"
                }
            },
            {
                "name": "ActionDelayShort",
                "type": "float",
                "comment": {
                    "sameline": "// Time between short actions"
                }
            },
            {
                "name": "ActionDelayStandard",
                "type": "float",
                "comment": {
                    "sameline": "// Time between most actions"
                }
            },
            {
                "name": "VideoCaptureEncoderPath[256]",
                "size": 256,
                "type": "char",
                "comment": {
                    "sameline": "// Video encoder executable path, e.g. \"path/to/ffmpeg.exe\"."
                }
            },
            {
                "name": "VideoCaptureEncoderParams[256]",
                "size": 256,
                "type": "char",
                "comment": {
                    "sameline": "// Video encoder parameters for .MP4 captures, e.g. see IMGUI_CAPTURE_DEFAULT_VIDEO_PARAMS_FOR_FFMPEG"
                }
            },
            {
                "name": "GifCaptureEncoderParams[512]",
                "size": 512,
                "type": "char",
                "comment": {
                    "sameline": "// Video encoder parameters for .GIF captures, e.g. see IMGUI_CAPTURE_DEFAULT_GIF_PARAMS_FOR_FFMPEG"
                }
            },
            {
                "name": "VideoCaptureExtension[8]",
                "size": 8,
                "type": "char",
                "comment": {
                    "sameline": "// Video file extension (default, may be overridden by test)."
                }
            },
            {
                "name": "ConfigWatchdogWarning",
                "type": "float",
                "comment": {
                    "sameline": "// Warn when a test exceed this time (in second)"
                }
            },
            {
                "name": "ConfigWatchdogKillTest",
                "type": "float",
                "comment": {
                    "sameline": "// Attempt to stop running a test when exceeding this time (in second)"
                }
            },
            {
                "name": "ConfigWatchdogKillApp",
                "type": "float",
                "comment": {
                    "sameline": "// Stop application when exceeding this time (in second)"
                }
            },
            {
                "name": "ExportResultsFilename",
                "type": "const char*"
            },
            {
                "name": "ExportResultsFormat",
                "type": "ImGuiTestEngineExportFormat"
            },
            {
                "name": "CheckDrawDataIntegrity",
                "type": "bool",
                "comment": {
                    "sameline": "// Check ImDrawData integrity (buffer count, etc.). Currently cheap but may become a slow operation."
                }
            },
            {
                "name": "IsRunningTests",
                "type": "bool"
            },
            {
                "name": "IsRequestingMaxAppSpeed",
                "type": "bool",
                "comment": {
                    "sameline": "// When running in fast mode: request app to skip vsync or even skip rendering if it wants"
                }
            },
            {
                "name": "IsCapturing",
                "type": "bool",
                "comment": {
                    "sameline": "// Capture is in progress"
                }
            }
        ],
        "ImBuildInfo": [
            {
                "name": "Type",
                "type": "const char*"
            },
            {
                "name": "Cpu",
                "type": "const char*"
            },
            {
                "name": "OS",
                "type": "const char*"
            },
            {
                "name": "Compiler",
                "type": "const char*"
            },
            {
                "name": "Date[32]",
                "size": 32,
                "type": "char",
                "comment": {
                    "sameline": "// \"YYYY-MM-DD\""
                }
            },
            {
                "name": "Time",
                "type": "const char*"
            }
        ],
        "ImGuiPerfToolBatch": [
            {
                "name": "BatchID",
                "type": "unsigned long long",
                "comment": {
                    "sameline": "// Timestamp of the batch, or unique ID of the build in combined mode."
                }
            },
            {
                "name": "NumSamples",
                "type": "int",
                "comment": {
                    "sameline": "// A number of unique batches aggregated."
                }
            },
            {
                "name": "BranchIndex",
                "type": "int",
                "comment": {
                    "sameline": "// For per-branch color mapping."
                }
            },
            {
                "name": "Entries",
                "type": "ImVector_ImGuiPerfToolEntry",
                "comment": {
                    "sameline": "// Aggregated perf test entries. Order follows ImGuiPerfTool::_LabelsVisible order."
                }
            }
        ],
        "ImGuiTestContext": [
            {
                "name": "GenericVars",
                "type": "ImGuiTestGenericVars",
                "comment": {
                    "sameline": "// Generic variables holder for convenience."
                }
            },
            {
                "name": "UserVars",
                "type": "void*",
                "comment": {
                    "sameline": "// Access using ctx->GetVars<Type>(). Setup with test->SetVarsDataType<>()."
                }
            },
            {
                "name": "UiContext",
                "type": "ImGuiContext*",
                "comment": {
                    "sameline": "// UI context"
                }
            },
            {
                "name": "EngineIO",
                "type": "ImGuiTestEngineIO*",
                "comment": {
                    "sameline": "// Test Engine IO/settings"
                }
            },
            {
                "name": "Test",
                "type": "ImGuiTest*",
                "comment": {
                    "sameline": "// Test currently running"
                }
            },
            {
                "name": "TestOutput",
                "type": "ImGuiTestOutput*",
                "comment": {
                    "sameline": "// Test output (generally == &Test->Output)"
                }
            },
            {
                "name": "OpFlags",
                "type": "int",
                "comment": {
                    "sameline": "// Flags affecting all operation (supported: ImGuiTestOpFlags_NoAutoUncollapse)"
                }
            },
            {
                "name": "PerfStressAmount",
                "type": "int",
                "comment": {
                    "sameline": "// Convenience copy of engine->IO.PerfStressAmount"
                }
            },
            {
                "name": "FrameCount",
                "type": "int",
                "comment": {
                    "sameline": "// Test frame count (restarts from zero every time)"
                }
            },
            {
                "name": "FirstTestFrameCount",
                "type": "int",
                "comment": {
                    "sameline": "// First frame where TestFunc is running (after warm-up frame). This is generally -1 or 0 depending on whether we have warm up enabled"
                }
            },
            {
                "name": "FirstGuiFrame",
                "type": "bool"
            },
            {
                "name": "HasDock",
                "type": "bool",
                "comment": {
                    "sameline": "// #ifdef IMGUI_HAS_DOCK expressed in an easier to test value"
                }
            },
            {
                "name": "CaptureArgs",
                "type": "ImGuiCaptureArgs*",
                "comment": {
                    "sameline": "// Capture settings used by ctx->Capture*() functions"
                }
            },
            {
                "name": "Engine",
                "type": "ImGuiTestEngine*"
            },
            {
                "name": "Inputs",
                "type": "ImGuiTestInputs*"
            },
            {
                "name": "RunFlags",
                "type": "int"
            },
            {
                "name": "ActiveFunc",
                "type": "ImGuiTestActiveFunc",
                "comment": {
                    "sameline": "// None/GuiFunc/TestFunc"
                }
            },
            {
                "name": "RunningTime",
                "type": "double",
                "comment": {
                    "sameline": "// Amount of wall clock time the Test has been running. Used by safety watchdog."
                }
            },
            {
                "name": "ActionDepth",
                "type": "int",
                "comment": {
                    "sameline": "// Nested depth of ctx-> function calls (used to decorate log)"
                }
            },
            {
                "name": "CaptureCounter",
                "type": "int",
                "comment": {
                    "sameline": "// Number of captures"
                }
            },
            {
                "name": "ErrorCounter",
                "type": "int",
                "comment": {
                    "sameline": "// Number of errors (generally this maxxes at 1 as most functions will early out)"
                }
            },
            {
                "name": "Abort",
                "type": "bool"
            },
            {
                "name": "PerfRefDt",
                "type": "double"
            },
            {
                "name": "PerfIterations",
                "type": "int",
                "comment": {
                    "sameline": "// Number of frames for PerfCapture() measurements"
                }
            },
            {
                "name": "RefStr[256]",
                "size": 256,
                "type": "char",
                "comment": {
                    "sameline": "// Reference window/path over which all named references are based"
                }
            },
            {
                "name": "RefID",
                "type": "unsigned int",
                "comment": {
                    "sameline": "// Reference ID over which all named references are based"
                }
            },
            {
                "name": "RefWindowID",
                "type": "unsigned int",
                "comment": {
                    "sameline": "// ID of a window that contains RefID item"
                }
            },
            {
                "name": "InputMode",
                "type": "ImGuiInputSource",
                "comment": {
                    "sameline": "// Prefer interacting with mouse/keyboard/gamepad"
                }
            },
            {
                "name": "TempString",
                "type": "ImVector_char"
            },
            {
                "name": "Clipboard",
                "type": "ImVector_char",
                "comment": {
                    "sameline": "// Private clipboard for the test instance"
                }
            },
            {
                "name": "ForeignWindowsToHide",
                "type": "ImVector_ImGuiWindowPtr"
            },
            {
                "name": "DummyItemInfoNull",
                "type": "ImGuiTestItemInfo",
                "comment": {
                    "sameline": "// Storage for ItemInfoNull()"
                }
            },
            {
                "name": "CachedLinesPrintedToTTY",
                "type": "bool"
            }
        ],
        "ImGuiTestItemList": [
            {
                "name": "Pool",
                "type": "ImPool_ImGuiTestItemInfo"
            }
        ],
        "ImGuiTestActionFilter": [
            {
                "name": "MaxDepth",
                "type": "int"
            },
            {
                "name": "MaxPasses",
                "type": "int"
            },
            {
                "name": "MaxItemCountPerDepth",
                "type": "const int*"
            },
            {
                "name": "RequireAllStatusFlags",
                "type": "int"
            },
            {
                "name": "RequireAnyStatusFlags",
                "type": "int"
            }
        ],
        "ImGuiTestLogLineInfo": [
            {
                "name": "Level",
                "type": "ImGuiTestVerboseLevel"
            },
            {
                "name": "LineOffset",
                "type": "int"
            }
        ],
        "ImGuiTestInput": [
            {
                "name": "Type",
                "type": "ImGuiTestInputType"
            },
            {
                "name": "KeyChord",
                "type": "int"
            },
            {
                "name": "Char",
                "type": "unsigned short"
            },
            {
                "name": "Down",
                "type": "bool"
            },
            {
                "name": "ViewportId",
                "type": "unsigned int"
            },
            {
                "name": "ViewportPosSize",
                "type": "ImVec2"
            }
        ],
        "ImGuiTestCoroutineInterface": [
            {
                "name": "CreateFunc",
                "type": "ImGuiTestCoroutineHandle (*)(ImGuiTestCoroutineMainFunc *, const char *, void *)"
            },
            {
                "name": "DestroyFunc",
                "type": "void (*)(ImGuiTestCoroutineHandle)"
            },
            {
                "name": "RunFunc",
                "type": "bool (*)(ImGuiTestCoroutineHandle)"
            },
            {
                "name": "YieldFunc",
                "type": "void (*)()"
            }
        ],
        "ImGuiTestItemInfo": [
            {
                "name": "ID",
                "type": "unsigned int",
                "comment": {
                    "sameline": "// Item ID"
                }
            },
            {
                "name": "DebugLabel[32]",
                "size": 32,
                "type": "char",
                "comment": {
                    "sameline": "// Shortened/truncated label for debugging and convenience purpose"
                }
            },
            {
                "name": "Window",
                "type": "ImGuiWindow*",
                "comment": {
                    "sameline": "// Item Window"
                }
            },
            {
                "name": "NavLayer",
                "type": "unsigned int",
                "comment": {
                    "sameline": "// Nav layer of the item (ImGuiNavLayer)"
                }
            },
            {
                "name": "Depth",
                "type": "int",
                "comment": {
                    "sameline": "// Depth from requested parent id. 0 == ID is immediate child of requested parent id."
                }
            },
            {
                "name": "TimestampMain",
                "type": "int",
                "comment": {
                    "sameline": "// Timestamp of main result (all fields)"
                }
            },
            {
                "name": "TimestampStatus",
                "type": "int",
                "comment": {
                    "sameline": "// Timestamp of StatusFlags"
                }
            },
            {
                "name": "ParentID",
                "type": "unsigned int",
                "comment": {
                    "sameline": "// Item Parent ID (value at top of the ID stack)"
                }
            },
            {
                "name": "RectFull",
                "type": "ImRect",
                "comment": {
                    "sameline": "// Item Rectangle"
                }
            },
            {
                "name": "RectClipped",
                "type": "ImRect",
                "comment": {
                    "sameline": "// Item Rectangle (clipped with window->ClipRect at time of item submission)"
                }
            },
            {
                "name": "ItemFlags",
                "type": "int",
                "comment": {
                    "sameline": "// Item flags"
                }
            },
            {
                "name": "StatusFlags",
                "type": "int",
                "comment": {
                    "sameline": "// Item Status flags (fully updated for some items only, compare TimestampStatus to FrameCount)"
                }
            }
        ],
        "ImGuiTestFindByLabelTask": [
            {
                "name": "InPrefixId",
                "type": "unsigned int",
                "comment": {
                    "sameline": "// A known base ID which appears BEFORE the wildcard ID (for \"hello/**/foo/bar\" it would be hash of \"hello\")"
                }
            },
            {
                "name": "InSuffixDepth",
                "type": "int",
                "comment": {
                    "sameline": "// Number of labels in a path, after unknown base ID (for \"hello/**/foo/bar\" it would be 2)"
                }
            },
            {
                "name": "InSuffix",
                "type": "const char*",
                "comment": {
                    "sameline": "// A label string which appears on ID stack after unknown base ID (for \"hello/**/foo/bar\" it would be \"foo/bar\")"
                }
            },
            {
                "name": "InSuffixLastItem",
                "type": "const char*",
                "comment": {
                    "sameline": "// A last label string (for \"hello/**/foo/bar\" it would be \"bar\")"
                }
            },
            {
                "name": "InSuffixLastItemHash",
                "type": "unsigned int"
            },
            {
                "name": "InFilterItemStatusFlags",
                "type": "int",
                "comment": {
                    "sameline": "// Flags required for item to be returned"
                }
            },
            {
                "name": "OutItemId",
                "type": "unsigned int",
                "comment": {
                    "sameline": "// Result item ID"
                }
            }
        ],
        "ImGuiCsvParser": [
            {
                "name": "Columns",
                "type": "int",
                "comment": {
                    "sameline": "// Number of columns in CSV file."
                }
            },
            {
                "name": "Rows",
                "type": "int",
                "comment": {
                    "sameline": "// Number of rows in CSV file."
                }
            },
            {
                "name": "_Data",
                "type": "char*",
                "comment": {
                    "sameline": "// CSV file data."
                }
            },
            {
                "name": "_Index",
                "type": "ImVector_charPtr",
                "comment": {
                    "sameline": "// CSV table: _Index[row * _Columns + col]."
                }
            }
        ],
        "ImGuiTestGenericItemStatus": [
            {
                "name": "RetValue",
                "type": "int",
                "comment": {
                    "sameline": "// return value"
                }
            },
            {
                "name": "Hovered",
                "type": "int",
                "comment": {
                    "sameline": "// result of IsItemHovered()"
                }
            },
            {
                "name": "Active",
                "type": "int",
                "comment": {
                    "sameline": "// result of IsItemActive()"
                }
            },
            {
                "name": "Focused",
                "type": "int",
                "comment": {
                    "sameline": "// result of IsItemFocused()"
                }
            },
            {
                "name": "Clicked",
                "type": "int",
                "comment": {
                    "sameline": "// result of IsItemClicked()"
                }
            },
            {
                "name": "Visible",
                "type": "int",
                "comment": {
                    "sameline": "// result of IsItemVisible()"
                }
            },
            {
                "name": "Edited",
                "type": "int",
                "comment": {
                    "sameline": "// result of IsItemEdited()"
                }
            },
            {
                "name": "Activated",
                "type": "int",
                "comment": {
                    "sameline": "// result of IsItemActivated()"
                }
            },
            {
                "name": "Deactivated",
                "type": "int",
                "comment": {
                    "sameline": "// result of IsItemDeactivated()"
                }
            },
            {
                "name": "DeactivatedAfterEdit",
                "type": "int",
                "comment": {
                    "sameline": "// result of IsItemDeactivatedAfterEdit()"
                }
            }
        ]
    },
    "enums": {
        "ImGuiTestVerboseLevel": [
            {
                "name": "ImGuiTestVerboseLevel_Silent",
                "value": "0",
                "calc_value": 0,
                "comment": "// -v0"
            },
            {
                "name": "ImGuiTestVerboseLevel_Error",
                "value": "1",
                "calc_value": 1,
                "comment": "// -v1"
            },
            {
                "name": "ImGuiTestVerboseLevel_Warning",
                "value": "2",
                "calc_value": 2,
                "comment": "// -v2"
            },
            {
                "name": "ImGuiTestVerboseLevel_Info",
                "value": "3",
                "calc_value": 3,
                "comment": "// -v3"
            },
            {
                "name": "ImGuiTestVerboseLevel_Debug",
                "value": "4",
                "calc_value": 4,
                "comment": "// -v4"
            },
            {
                "name": "ImGuiTestVerboseLevel_Trace",
                "value": "5",
                "calc_value": 5
            },
            {
                "name": "ImGuiTestVerboseLevel_COUNT",
                "value": "",
                "calc_value": 6
            }
        ],
        "ImGuiTestLogFlags_": [
            {
                "name": "ImGuiTestLogFlags_None",
                "value": "0",
                "calc_value": 0
            },
            {
                "name": "ImGuiTestLogFlags_NoHeader",
                "value": "1 << 0",
                "calc_value": 1,
                "comment": "// Do not display frame count and depth padding"
            }
        ],
        "ImGuiTestAction": [
            {
                "name": "ImGuiTestAction_Unknown",
                "value": "0",
                "calc_value": 0
            },
            {
                "name": "ImGuiTestAction_Hover",
                "value": "",
                "calc_value": 1,
                "comment": "// Move mouse"
            },
            {
                "name": "ImGuiTestAction_Click",
                "value": "",
                "calc_value": 2,
                "comment": "// Move mouse and click"
            },
            {
                "name": "ImGuiTestAction_DoubleClick",
                "value": "",
                "calc_value": 3,
                "comment": "// Move mouse and double-click"
            },
            {
                "name": "ImGuiTestAction_Check",
                "value": "",
                "calc_value": 4,
                "comment": "// Check item if unchecked (Checkbox, MenuItem or any widget reporting ImGuiItemStatusFlags_Checkable)"
            },
            {
                "name": "ImGuiTestAction_Uncheck",
                "value": "",
                "calc_value": 5,
                "comment": "// Uncheck item if checked"
            },
            {
                "name": "ImGuiTestAction_Open",
                "value": "",
                "calc_value": 6,
                "comment": "// Open item if closed (TreeNode, BeginMenu or any widget reporting ImGuiItemStatusFlags_Openable)"
            },
            {
                "name": "ImGuiTestAction_Close",
                "value": "",
                "calc_value": 7,
                "comment": "// Close item if opened"
            },
            {
                "name": "ImGuiTestAction_Input",
                "value": "",
                "calc_value": 8,
                "comment": "// Start text inputing into a field (e.g. CTRL+Click on Drags/Slider, click on InputText etc.)"
            },
            {
                "name": "ImGuiTestAction_NavActivate",
                "value": "",
                "calc_value": 9,
                "comment": "// Activate item with navigation"
            },
            {
                "name": "ImGuiTestAction_COUNT",
                "value": "",
                "calc_value": 10
            }
        ],
        "ImGuiCaptureFlags_": [
            {
                "name": "ImGuiCaptureFlags_None",
                "value": "0",
                "calc_value": 0
            },
            {
                "name": "ImGuiCaptureFlags_StitchAll",
                "value": "1 << 0",
                "calc_value": 1,
                "comment": "// Capture entire window scroll area (by scrolling and taking multiple screenshot). Only works for a single window."
            },
            {
                "name": "ImGuiCaptureFlags_IncludeOtherWindows",
                "value": "1 << 1",
                "calc_value": 2,
                "comment": "// Disable hiding other windows (when CaptureAddWindow has been called by default other windows are hidden)"
            },
            {
                "name": "ImGuiCaptureFlags_IncludePopups",
                "value": "1 << 2",
                "calc_value": 4,
                "comment": "// Expand capture area to automatically include visible popups (Unused if ImGuiCaptureFlags_IncludeOtherWindows is set)"
            },
            {
                "name": "ImGuiCaptureFlags_HideMouseCursor",
                "value": "1 << 3",
                "calc_value": 8,
                "comment": "// Hide render software mouse cursor during capture."
            },
            {
                "name": "ImGuiCaptureFlags_Instant",
                "value": "1 << 4",
                "calc_value": 16,
                "comment": "// Perform capture on very same frame. Only works when capturing a rectangular region. Unsupported features: content stitching, window hiding, window relocation."
            },
            {
                "name": "ImGuiCaptureFlags_NoSave",
                "value": "1 << 5",
                "calc_value": 32,
                "comment": "// Do not save output image."
            }
        ],
        "ImGuiTestOpFlags_": [
            {
                "name": "ImGuiTestOpFlags_None",
                "value": "0",
                "calc_value": 0
            },
            {
                "name": "ImGuiTestOpFlags_NoCheckHoveredId",
                "value": "1 << 1",
                "calc_value": 2,
                "comment": "// Don't check for HoveredId after aiming for a widget. A few situations may want this: while e.g. dragging or another items prevents hovering, or for items that don't use ItemHoverable()"
            },
            {
                "name": "ImGuiTestOpFlags_NoError",
                "value": "1 << 2",
                "calc_value": 4,
                "comment": "// Don't abort/error e.g. if the item cannot be found or the operation doesn't succeed."
            },
            {
                "name": "ImGuiTestOpFlags_NoFocusWindow",
                "value": "1 << 3",
                "calc_value": 8,
                "comment": "// Don't focus window when aiming at an item"
            },
            {
                "name": "ImGuiTestOpFlags_NoAutoUncollapse",
                "value": "1 << 4",
                "calc_value": 16,
                "comment": "// Disable automatically uncollapsing windows (useful when specifically testing Collapsing behaviors)"
            },
            {
                "name": "ImGuiTestOpFlags_NoAutoOpenFullPath",
                "value": "1 << 5",
                "calc_value": 32,
                "comment": "// Disable automatically opening intermediaries (e.g. ItemClick(\"Hello/OK\") will automatically first open \"Hello\" if \"OK\" isn't found. Only works if ref is a string path."
            },
            {
                "name": "ImGuiTestOpFlags_NoYield",
                "value": "1 << 6",
                "calc_value": 64,
                "comment": "// Don't yield (only supported by a few functions), in case you need to manage rigorous per-frame timing."
            },
            {
                "name": "ImGuiTestOpFlags_IsSecondAttempt",
                "value": "1 << 7",
                "calc_value": 128,
                "comment": "// Used by recursing functions to indicate a second attempt"
            },
            {
                "name": "ImGuiTestOpFlags_MoveToEdgeL",
                "value": "1 << 8",
                "calc_value": 256,
                "comment": "// Simple Dumb aiming helpers to test widget that care about clicking position. May need to replace will better functionalities."
            },
            {
                "name": "ImGuiTestOpFlags_MoveToEdgeR",
                "value": "1 << 9",
                "calc_value": 512
            },
            {
                "name": "ImGuiTestOpFlags_MoveToEdgeU",
                "value": "1 << 10",
                "calc_value": 1024
            },
            {
                "name": "ImGuiTestOpFlags_MoveToEdgeD",
                "value": "1 << 11",
                "calc_value": 2048
            }
        ],
        "ImOsConsoleTextColor": [
            {
                "name": "ImOsConsoleTextColor_Black",
                "value": "",
                "calc_value": 0
            },
            {
                "name": "ImOsConsoleTextColor_White",
                "value": "",
                "calc_value": 1
            },
            {
                "name": "ImOsConsoleTextColor_BrightWhite",
                "value": "",
                "calc_value": 2
            },
            {
                "name": "ImOsConsoleTextColor_BrightRed",
                "value": "",
                "calc_value": 3
            },
            {
                "name": "ImOsConsoleTextColor_BrightGreen",
                "value": "",
                "calc_value": 4
            },
            {
                "name": "ImOsConsoleTextColor_BrightBlue",
                "value": "",
                "calc_value": 5
            },
            {
                "name": "ImOsConsoleTextColor_BrightYellow",
                "value": "",
                "calc_value": 6
            }
        ],
        "ImGuiTestCheckFlags_": [
            {
                "name": "ImGuiTestCheckFlags_None",
                "value": "0",
                "calc_value": 0
            },
            {
                "name": "ImGuiTestCheckFlags_SilentSuccess",
                "value": "1 << 0",
                "calc_value": 1
            }
        ],
        "ImGuiTestActiveFunc": [
            {
                "name": "ImGuiTestActiveFunc_None",
                "value": "",
                "calc_value": 0
            },
            {
                "name": "ImGuiTestActiveFunc_GuiFunc",
                "value": "",
                "calc_value": 1
            },
            {
                "name": "ImGuiTestActiveFunc_TestFunc",
                "value": "",
                "calc_value": 2
            }
        ],
        "ImGuiTestRunSpeed": [
            {
                "name": "ImGuiTestRunSpeed_Fast",
                "value": "0",
                "calc_value": 0,
                "comment": "// Run tests as fast as possible (teleport mouse, skip delays, etc.)"
            },
            {
                "name": "ImGuiTestRunSpeed_Normal",
                "value": "1",
                "calc_value": 1,
                "comment": "// Run tests at human watchable speed (for debugging)"
            },
            {
                "name": "ImGuiTestRunSpeed_Cinematic",
                "value": "2",
                "calc_value": 2,
                "comment": "// Run tests with pauses between actions (for e.g. tutorials)"
            },
            {
                "name": "ImGuiTestRunSpeed_COUNT",
                "value": "",
                "calc_value": 3
            }
        ],
        "ImGuiTestRunFlags_": [
            {
                "name": "ImGuiTestRunFlags_None",
                "value": "0",
                "calc_value": 0
            },
            {
                "name": "ImGuiTestRunFlags_GuiFuncDisable",
                "value": "1 << 0",
                "calc_value": 1,
                "comment": "// Used internally to temporarily disable the GUI func (at the end of a test, etc)"
            },
            {
                "name": "ImGuiTestRunFlags_GuiFuncOnly",
                "value": "1 << 1",
                "calc_value": 2,
                "comment": "// Set when user selects \"Run GUI func\""
            },
            {
                "name": "ImGuiTestRunFlags_NoSuccessMsg",
                "value": "1 << 2",
                "calc_value": 4
            },
            {
                "name": "ImGuiTestRunFlags_EnableRawInputs",
                "value": "1 << 3",
                "calc_value": 8,
                "comment": "// Disable input submission to let test submission raw input event (in order to test e.g. IO queue)"
            },
            {
                "name": "ImGuiTestRunFlags_RunFromGui",
                "value": "1 << 4",
                "calc_value": 16,
                "comment": "// Test ran manually from GUI, will disable watchdog."
            },
            {
                "name": "ImGuiTestRunFlags_RunFromCommandLine",
                "value": "1 << 5",
                "calc_value": 32,
                "comment": "// Test queued from command-line."
            },
            {
                "name": "ImGuiTestRunFlags_NoError",
                "value": "1 << 10",
                "calc_value": 1024
            },
            {
                "name": "ImGuiTestRunFlags_ShareVars",
                "value": "1 << 11",
                "calc_value": 2048,
                "comment": "// Share generic vars and custom vars between child and parent tests (custom vars need to be same type)"
            },
            {
                "name": "ImGuiTestRunFlags_ShareTestContext",
                "value": "1 << 12",
                "calc_value": 4096,
                "comment": "// Share ImGuiTestContext instead of creating a new one (unsure what purpose this may be useful for yet)"
            }
        ],
        "ImGuiCaptureStatus": [
            {
                "name": "ImGuiCaptureStatus_InProgress",
                "value": "",
                "calc_value": 0
            },
            {
                "name": "ImGuiCaptureStatus_Done",
                "value": "",
                "calc_value": 1
            },
            {
                "name": "ImGuiCaptureStatus_Error",
                "value": "",
                "calc_value": 2
            }
        ],
        "ImGuiTestEngineExportFormat": [
            {
                "name": "ImGuiTestEngineExportFormat_None",
                "value": "0",
                "calc_value": 0
            },
            {
                "name": "ImGuiTestEngineExportFormat_JUnitXml",
                "value": "",
                "calc_value": 1
            }
        ],
        "ImGuiTestInputType": [
            {
                "name": "ImGuiTestInputType_None",
                "value": "",
                "calc_value": 0
            },
            {
                "name": "ImGuiTestInputType_Key",
                "value": "",
                "calc_value": 1
            },
            {
                "name": "ImGuiTestInputType_Char",
                "value": "",
                "calc_value": 2
            },
            {
                "name": "ImGuiTestInputType_ViewportFocus",
                "value": "",
                "calc_value": 3
            },
            {
                "name": "ImGuiTestInputType_ViewportSetPos",
                "value": "",
                "calc_value": 4
            },
            {
                "name": "ImGuiTestInputType_ViewportSetSize",
                "value": "",
                "calc_value": 5
            },
            {
                "name": "ImGuiTestInputType_ViewportClose",
                "value": "",
                "calc_value": 6
            }
        ],
        "ImGuiPerfToolDisplayType": [
            {
                "name": "ImGuiPerfToolDisplayType_Simple",
                "value": "",
                "calc_value": 0,
                "comment": "// Each run will be displayed individually."
            },
            {
                "name": "ImGuiPerfToolDisplayType_PerBranchColors",
                "value": "",
                "calc_value": 1,
                "comment": "// Use one bar color per branch."
            },
            {
                "name": "ImGuiPerfToolDisplayType_CombineByBuildInfo",
                "value": "",
                "calc_value": 2,
                "comment": "// Entries with same build information will be averaged."
            }
        ],
        "ImGuiTestGroup": [
            {
                "name": "ImGuiTestGroup_Unknown",
                "value": "-1",
                "calc_value": 4294967295
            },
            {
                "name": "ImGuiTestGroup_Tests",
                "value": "0",
                "calc_value": 0
            },
            {
                "name": "ImGuiTestGroup_Perfs",
                "value": "1",
                "calc_value": 1
            },
            {
                "name": "ImGuiTestGroup_COUNT",
                "value": "",
                "calc_value": 2
            }
        ],
        "ImGuiTestStatus": [
            {
                "name": "ImGuiTestStatus_Unknown",
                "value": "0",
                "calc_value": 0
            },
            {
                "name": "ImGuiTestStatus_Success",
                "value": "1",
                "calc_value": 1
            },
            {
                "name": "ImGuiTestStatus_Queued",
                "value": "2",
                "calc_value": 2
            },
            {
                "name": "ImGuiTestStatus_Running",
                "value": "3",
                "calc_value": 3
            },
            {
                "name": "ImGuiTestStatus_Error",
                "value": "4",
                "calc_value": 4
            },
            {
                "name": "ImGuiTestStatus_Suspended",
                "value": "5",
                "calc_value": 5
            },
            {
                "name": "ImGuiTestStatus_COUNT",
                "value": "",
                "calc_value": 6
            }
        ],
        "ImOsConsoleStream": [
            {
                "name": "ImOsConsoleStream_StandardOutput",
                "value": "",
                "calc_value": 0
            },
            {
                "name": "ImOsConsoleStream_StandardError",
                "value": "",
                "calc_value": 1
            }
        ],
        "ImGuiTestFlags_": [
            {
                "name": "ImGuiTestFlags_None",
                "value": "0",
                "calc_value": 0
            },
            {
                "name": "ImGuiTestFlags_NoGuiWarmUp",
                "value": "1 << 0",
                "calc_value": 1,
                "comment": "// Disable running the GUI func for 2 frames before starting test code. For tests which absolutely need to start before GuiFunc."
            },
            {
                "name": "ImGuiTestFlags_NoAutoFinish",
                "value": "1 << 1",
                "calc_value": 2,
                "comment": "// By default, tests with no TestFunc (only a GuiFunc) will end after warmup. Setting this require test to call ctx->Finish()."
            },
            {
                "name": "ImGuiTestFlags_NoRecoveryWarnings",
                "value": "1 << 2",
                "calc_value": 4,
                "comment": "// Error/recovery warnings (missing End/Pop calls etc.) will be displayed as normal debug entries, for tests which may rely on those."
            }
        ]
    }
}